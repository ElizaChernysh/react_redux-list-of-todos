{"version":3,"sources":["store/types.ts","store/store.ts","api.ts","store/actions.ts","store/selector.ts","components/CurrentUser/CurrentUser.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["ActionType","initialState","todos","selectUserById","user","removeTodoById","store","createStore","state","action","type","AddTodos","payload","SelectUserById","LoadUserById","RemoveTodoById","filter","todo","id","BASE_URL","getTodosFromServer","a","fetch","response","json","message","Error","getUserFromServer","users","selectUserIdAction","getTodosSeletor","selectedUserIdSelector","getUserSelector","CurrentUser","selectedUser","useSelector","selectedUserId","dispatch","useDispatch","useEffect","then","data","className","name","email","phone","onClick","TodoList","useState","query","setQuery","selectedOption","setSelectedOption","todosFS","filteredTodos","useMemo","title","toLowerCase","includes","completed","deleteTodo","value","onChange","event","target","placeholder","map","item","checked","readOnly","userId","App","React","memo","selectedId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86e2fe62.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\n\nexport interface State {\n  removeTodoById: number;\n  todos: Todo[],\n  selectUserById: number;\n  user: User | null;\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum ActionType {\n  AddTodos = 'AddTodos',\n  SelectUserById = 'SelectUserById',\n  LoadUserById = 'LoadUserById',\n  RemoveTodoById = ' RemoveTodoById',\n}\n\nexport type AddTodosAction = Action<ActionType.AddTodos, Todo[]>;\nexport type SelectUserIdAction = Action<ActionType.SelectUserById, number>;\nexport type LoadUserByIdAction = Action<ActionType.LoadUserById, User>;\nexport type RemoveTodoById = Action<ActionType.RemoveTodoById, number>;\n\nexport type Actions = AddTodosAction\n| SelectUserIdAction\n| LoadUserByIdAction\n| RemoveTodoById;\n","import { createStore, Reducer, Store } from 'redux';\nimport { Actions, ActionType, State } from './types';\n\nconst initialState: State = {\n  todos: [],\n  selectUserById: 0,\n  user: null,\n  removeTodoById: 0,\n};\n\nconst reducer: Reducer<State, Actions> = (\n  state: State = initialState, action,\n): State => {\n  switch (action.type) {\n    case ActionType.AddTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n    case ActionType.SelectUserById:\n      return {\n        ...state,\n        selectUserById: action.payload,\n      };\n    case ActionType.LoadUserById:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionType.RemoveTodoById:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store: Store<State, Actions> = createStore(reducer);\n","// import { User } from './Types/User';\n// import { Todo } from './Types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodosFromServer = async (): Promise<Todo[]> => {\n  try {\n    const response = await fetch(`${BASE_URL}/todos`);\n    const todos = await response.json();\n\n    return todos;\n  } catch (error) {\n    if (\n      error\n      && typeof error === 'object'\n      && (error as Error).message === 'Failed to fetch'\n    ) {\n      throw new Error('Now you cannot connect the server and get todos');\n    } else {\n      throw error;\n    }\n  }\n};\n\nexport const getUserFromServer = async (id: number): Promise<User> => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${id}`);\n    const users = await response.json();\n\n    return users;\n  } catch (error) {\n    if (\n      error\n      && typeof error === 'object'\n      && (error as Error).message === 'Failed to fetch'\n    ) {\n      throw new Error('Cannot connect the server and get users');\n    } else {\n      throw error;\n    }\n  }\n};\n","import {\n  ActionType, AddTodosAction, LoadUserByIdAction, SelectUserIdAction,\n} from './types';\n\nexport const addTodosActionCreator = (payload: Todo[]): AddTodosAction => ({\n  type: ActionType.AddTodos,\n  payload,\n});\n\nexport const selectUserIdAction = (payload: number): SelectUserIdAction => ({\n  type: ActionType.SelectUserById,\n  payload,\n});\n\nexport const addUserAction = (payload: User): LoadUserByIdAction => ({\n  type: ActionType.LoadUserById,\n  payload,\n});\n\nexport const removeTodo = (payload: number) => {\n  return {\n    type: ActionType.RemoveTodoById,\n    payload,\n  };\n};\n","import { State } from './types';\n\nexport const getTodosSeletor = (state: State): Todo[] => state.todos;\nexport const selectedUserIdSelector = (state: State) => state.selectUserById;\nexport const removeUserIdSelector = (state: State) => state.removeTodoById;\nexport const getUserSelector = (state: State) => state.user;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserFromServer } from '../../api';\nimport { addUserAction, selectUserIdAction } from '../../store/actions';\nimport { getUserSelector, selectedUserIdSelector } from '../../store/selector';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const selectedUser = useSelector(getUserSelector);\n  const selectedUserId = useSelector(selectedUserIdSelector);\n  const dispatch = useDispatch();\n\n  const clearUser = () => dispatch(selectUserIdAction(0));\n\n  useEffect(() => {\n    getUserFromServer(selectedUserId)\n      .then(data => dispatch(addUserAction(data)));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {\n        selectedUser ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {selectedUser?.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n            <button\n              className=\"CurrentUser__clear\n              button\"\n              type=\"button\"\n              onClick={clearUser}\n            >\n              Clear\n            </button>\n          </>\n        )\n          : (\n            <div className=\"lds-ripple\">\n              <div />\n              <div />\n            </div>\n          )\n      }\n    </div>\n  );\n};\n","import React, {\n  useState, useMemo, useEffect,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTodosFromServer } from '../../api';\nimport {\n  addTodosActionCreator, selectUserIdAction, removeTodo,\n} from '../../store/actions';\nimport { getTodosSeletor } from '../../store/selector';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  const todos = useSelector(getTodosSeletor);\n  const dispatch = useDispatch();\n  const selectUserId = (id: number) => dispatch(selectUserIdAction(id));\n\n  useEffect(() => {\n    getTodosFromServer()\n      .then((todosFS) => dispatch(addTodosActionCreator(todosFS)));\n  }, []);\n\n  const filteredTodos = useMemo(() => (\n    todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ))\n      .filter(todo => {\n        switch (selectedOption) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          default:\n            return true;\n        }\n      })), [selectedOption, query, todos]);\n\n  const deleteTodo = (id: number) => {\n    dispatch(removeTodo(id));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n        id=\"search-query\"\n        className=\"TodoList__input\"\n        placeholder=\"Write the Title\"\n      />\n      <select\n        onChange={event => setSelectedOption(event.target.value)}\n        className=\"TodoList__section\"\n      >\n        <option value=\"all\">all</option>\n        <option value=\"active\">active</option>\n        <option value=\"completed\">completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(item => (\n            <li\n              className={`TodoList__item ${item.completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}`}\n              key={item.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={item.completed} readOnly />\n                <p>{item.title}</p>\n              </label>\n              {item.userId && (\n                <div className=\"TodoList__button-container\">\n                  <button\n                    className=\"TodoList__user-button button\"\n                    type=\"button\"\n                    onClick={() => selectUserId(item.userId)}\n                  >\n                    User&nbsp;\n                    {item.userId}\n                  </button>\n                  <button\n                    className=\"TodoList__user-button button\"\n                    type=\"button\"\n                    onClick={() => deleteTodo(item.id)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { selectedUserIdSelector } from './store/selector';\n\nexport const App: React.FC = React.memo(() => {\n  const selectedId = useSelector(selectedUserIdSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedId\n            ? (\n              <CurrentUser />\n            ) : (\n              <h3>\n                No user selected\n              </h3>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}