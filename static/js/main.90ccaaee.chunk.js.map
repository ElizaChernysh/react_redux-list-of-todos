{"version":3,"sources":["store/types.ts","store/store.ts","api.ts","store/actions.ts","store/selector.ts","components/CurrentUser/CurrentUser.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["ActionType","initialState","todos","selectUserById","user","store","createStore","state","action","type","AddTodos","payload","SelectUserById","LoadUserById","BASE_URL","getTodosFromServer","a","fetch","response","json","message","Error","getUserFromServer","id","users","selectUserIdAction","getTodosSeletor","selectedUserIdSelector","getUserSelector","CurrentUser","selectedUser","useSelector","selectedUserId","dispatch","useDispatch","useEffect","then","data","className","name","email","phone","onClick","TodoList","useState","query","setQuery","selectedOption","setSelectedOption","todosFS","filteredTodos","useMemo","filter","todo","title","toLowerCase","includes","completed","value","onChange","event","target","placeholder","map","item","checked","readOnly","userId","App","React","memo","selectedId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90ccaaee.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\n\nexport interface State {\n  todos: Todo[],\n  selectUserById: number;\n  user: User | null;\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum ActionType {\n  AddTodos = 'AddTodos',\n  SelectUserById = 'SelectUserById',\n  LoadUserById = 'LoadUserById',\n}\n\nexport type AddTodosAction = Action<ActionType.AddTodos, Todo[]>;\nexport type SelectUserIdAction = Action<ActionType.SelectUserById, number>;\nexport type LoadUserByIdAction = Action<ActionType.LoadUserById, User>;\n\nexport type Actions = AddTodosAction | SelectUserIdAction | LoadUserByIdAction;\n","import { createStore, Reducer, Store } from 'redux';\nimport { Actions, ActionType, State } from './types';\n\nconst initialState: State = {\n  todos: [],\n  selectUserById: 0,\n  user: null,\n};\n\nconst reducer: Reducer<State, Actions> = (\n  state: State = initialState, action,\n): State => {\n  switch (action.type) {\n    case ActionType.AddTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n    case ActionType.SelectUserById:\n      return {\n        ...state,\n        selectUserById: action.payload,\n      };\n    case ActionType.LoadUserById:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store: Store<State, Actions> = createStore(reducer);\n","// import { User } from './Types/User';\n// import { Todo } from './Types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodosFromServer = async (): Promise<Todo[]> => {\n  try {\n    const response = await fetch(`${BASE_URL}/todos`);\n    const todos = await response.json();\n\n    return todos;\n  } catch (error) {\n    if (\n      error\n      && typeof error === 'object'\n      && (error as Error).message === 'Failed to fetch'\n    ) {\n      throw new Error('Now you cannot connect the server and get todos');\n    } else {\n      throw error;\n    }\n  }\n};\n\nexport const getUserFromServer = async (id: number): Promise<User> => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${id}`);\n    const users = await response.json();\n\n    return users;\n  } catch (error) {\n    if (\n      error\n      && typeof error === 'object'\n      && (error as Error).message === 'Failed to fetch'\n    ) {\n      throw new Error('Cannot connect the server and get users');\n    } else {\n      throw error;\n    }\n  }\n};\n","import {\n  ActionType, AddTodosAction, LoadUserByIdAction, SelectUserIdAction,\n} from './types';\n\nexport const addTodosActionCreator = (payload: Todo[]): AddTodosAction => ({\n  type: ActionType.AddTodos,\n  payload,\n});\n\nexport const selectUserIdAction = (payload: number): SelectUserIdAction => ({\n  type: ActionType.SelectUserById,\n  payload,\n});\n\nexport const addUserAction = (payload: User): LoadUserByIdAction => ({\n  type: ActionType.LoadUserById,\n  payload,\n});\n","import { State } from './types';\n\nexport const getTodosSeletor = (state: State): Todo[] => state.todos;\nexport const selectedUserIdSelector = (state: State) => state.selectUserById;\nexport const getUserSelector = (state: State) => state.user;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserFromServer } from '../../api';\nimport { addUserAction, selectUserIdAction } from '../../store/actions';\nimport { getUserSelector, selectedUserIdSelector } from '../../store/selector';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const selectedUser = useSelector(getUserSelector);\n  const selectedUserId = useSelector(selectedUserIdSelector);\n  const dispatch = useDispatch();\n\n  const clearUser = () => dispatch(selectUserIdAction(0));\n\n  useEffect(() => {\n    getUserFromServer(selectedUserId)\n      .then(data => dispatch(addUserAction(data)));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {\n        selectedUser ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {selectedUser?.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n            <button\n              className=\"CurrentUser__clear\n              button\"\n              type=\"button\"\n              onClick={clearUser}\n            >\n              Clear\n            </button>\n          </>\n        )\n          : (\n            <div className=\"lds-ripple\">\n              <div />\n              <div />\n            </div>\n          )\n      }\n    </div>\n  );\n};\n","import React, {\n  useState, useMemo, useEffect,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTodosFromServer } from '../../api';\nimport {\n  addTodosActionCreator, selectUserIdAction,\n} from '../../store/actions';\nimport { getTodosSeletor } from '../../store/selector';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  const todos = useSelector(getTodosSeletor);\n  const dispatch = useDispatch();\n  const selectUserId = (id: number) => dispatch(selectUserIdAction(id));\n\n  useEffect(() => {\n    getTodosFromServer()\n      .then((todosFS) => dispatch(addTodosActionCreator(todosFS)));\n  }, []);\n\n  const filteredTodos = useMemo(() => (\n    todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ))\n      .filter(todo => {\n        switch (selectedOption) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          default:\n            return true;\n        }\n      })), [selectedOption, query, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n        id=\"search-query\"\n        className=\"TodoList__input\"\n        placeholder=\"Write the Title\"\n      />\n      <select\n        onChange={event => setSelectedOption(event.target.value)}\n        className=\"TodoList__section\"\n      >\n        <option value=\"all\">all</option>\n        <option value=\"active\">active</option>\n        <option value=\"completed\">completed</option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(item => (\n            <li\n              className={`TodoList__item ${item.completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}`}\n              key={item.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={item.completed} readOnly />\n                <p>{item.title}</p>\n              </label>\n              {item.userId && (\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                  onClick={() => selectUserId(item.userId)}\n                >\n                  User&nbsp;\n                  {item.userId}\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { selectedUserIdSelector } from './store/selector';\n\nexport const App: React.FC = React.memo(() => {\n  const selectedId = useSelector(selectedUserIdSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedId\n            ? (\n              <CurrentUser />\n            ) : (\n              <h3>\n                No user selected\n              </h3>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}